* What am I
This is my NixOS config using flakes. I'm taking a lot of the initial setup from [[https://github.com/wimpysworld/nix-config/tree/c44a1bd13868e759bb215f54ca1f3fe49eba6dae][Whimpy's]] config. I'm quite new to this and his setup is quite close to what I wanted anyway.

* What do I want from me
The big things I want is to have a consistent KDE setup using ZFS for the file system. And someday I'll figure out how the emacs-overlay works and then use that to replace my emacs org-babel config.

** File System

| *Hostname* | *OEM*    | *Model*         | *OS*  | *Filesystem* | *Role*   | *Status* |
|------------+----------+-----------------+-------+--------------+----------+----------|
| phoenix    | Thinkpad | T14 AMD Gen 1   | NixOS | ZFS          | laptop   | WIP      |
| [[./nixos/starbase/][starbase]]   | DIY      | AMD EPYC 7302   | NixOS | ZFS          | racktop  | DONE     |
| [[./nixos/fermi/][fermi]]      | VM       | VM              | NixOS | ext4         | pihole   | TODO     |
| [[./nixos/akira][akira]]      | Thinkpad | X1 tablet Gen 3 | NixOS | ZFS          | slatetop | DONE     |
| [[./nixos/odyssey/][odyssey]]    | Custom   | Custom          | NixOS | ZFS          | desktop  | Done     |
| mars       | VM       | VM              | NixOS | ext4         | IOT VM   | TODO     |


I like ZFS and NixOS seems to have the easiest and most stable implementation of it I've come across in Linux. Due to the difference in licenses, ZFS can't be added to the Linux kernel like Btrfs is. To use it in most distros, you have to set it up yourself and the risk is all on you. Not fun. But NixOS has the modules addded by default and make it super easy to implement. Here's hoping that it's as stable long term as it's been short term.

The only place where I won't be using ZFS is in the VMs. This is because there's no benefit from nesting ZFS, as it were. ZFS works better when it has direct access to the drives. So I'll be using boring ol' ext4 on the VMs. That way, I can take snapshots of the VMs using ZFS and not worry.

** Install

Initially, I was using a bash script from [[https://github.com/mcdonc/.nixconfig/blob/master/prepsystem.sh][mcdonc]] to make a a basic config for a non-flake install. Now I'm using [[https://github.com/wimpysworld/nix-config/blob/c44a1bd13868e759bb215f54ca1f3fe49eba6dae/scripts/install.sh][Whimpy's install script]] that uses [[https://github.com/nix-community/disko/tree/master][Distro]] to build the root filesytem.

** Computers
A lot of this will be the same, as I like my KDE and ZFS. The differences will largely come down to the specific hardware found in each. The status below is dependent on the status of the host config and this flake setup overall. For example, my laptop runs NixOS, but it's being managed in the more traditional configuration.nix in /etc/nixos way.

Because I'm being cheeky; laptop is laptop, slatetop is a tablet, racktop is a server, virtualtop are VMs, handtop is a phone, and desktop is desktop.

** [[./nixos/starbase/][Host Server]]
Minimum install, just need it to be on top of ZFS and run VMs. Like with many hobbies I take up, I tend to take the hard route. This server and the VMs are on different VLANs.

[TODO] clean up the files to only what's relevant.

** Virtual Machines
*** IOT
*** Home Assistant
*** Personal Services
*** [[./nixos/fermi/][PiHole]]

* Machine Naming Convention
Surely the most important subject :laughing: Why do this when you should treat mass deployments like cattle? Mostly so I can easily identify them in tailscale. Also, how many servers do you admin?!

I'm following the typical, something super nerdy thing I care deeply for. In this case, Star Trek.

The computers are named after Starfleet classes of starship. Roughly analogous to the size / capability of the class to the computer. For example, my tablet is named after the Akira class, a smaller nimble vessel. While the desktop is named for the Odyssey class, a big strong capable vessel.

The servers are named after starbases. The main one is named after the starbase that orbits Earth. Any offsite ones will be named Deep Space <n> and VMs will be named after a planet of the system that starbase resides in.

Smaller VMs are named after shuttlecraft classes, with the first being the Fermi acting as a pihole.

* Installation

 - Depending on how much you like to pipe to bash; either clone this repo, cd into it, and run

#+begin_src bash
  sh scripts/install.sh <hostname> <username>
#+end_src

or

#+begin_src bash
  curl -sL https://raw.githubusercontent.com/Prometheus7435/nix-config/main/scripts/install.sh | bash -s <hostname> <username>
#+end_src

 - The install script uses Disko to automatically partition and format the disks, then uses my flake via nixos-install to complete a full-system installation
 - This flake is copied to the target user's home directory as ~/Zero/nix-config
 - Find :coffee: in a nebula
 - Reboot
 - Login and run rebuild-home (see below) from a terminal to complete the Home Manager configuration.

#+begin_src bash
  home-manager switch -b backup --flake $HOME/Zero/nix-config
#+end_src

* Applying Changes

This is a copy of [[https://github.com/wimpysworld/nix-config/tree/main#applying-changes-][Whimpy's]] README.

I clone this repo to ~/Zero/nix-config. NixOS and Home Manager changes are applied separately because I have some non-NixOS hosts.

#+begin_src bash
  gh repo clone wimpysworld/nix-config ~/Zero/nix-config
#+end_src

** NixOS snowflake

A rebuild-host alias is provided that does the following:

#+begin_src bash
  sudo nixos-rebuild switch --flake $HOME/Zero/nix-config
#+end_src

** Home Manager house

A rebuild-home alias is provided that does the following:

#+begin_src bash
  home-manager switch -b backup --flake $HOME/Zero/nix-config
#+end_src


* Troubleshooting
** Home-Manager
I tried to rebuild the home-manager setup after a fresh install of starbase and it gave me an error. It said it could not find suitable profile directory even though the folder it was looking for exists. Turns out, it's looking for a different folder it doesn't tell you about. A simple

#+begin_src bash
  mkdir -p ~/.local/state/nix/profiles
#+end_src

rerun the command, and it's all good.

Citation to solution:
https://www.reddit.com/r/Nix/comments/1443k3o/home_manager_installation_could_not_find_suitable/

** Git pulls

When I've deployed this to my server, I kept running into an issue where I'd try to pull and couldn't because of a conflict. My guess is the flake.lock file was changed which caused a conflict. The way around that (assuming you don't mind losing the local branch) is to run

#+begin_src bash
  git fetch --all && git reset --hard origin/main
#+end_src

I use the main branch name instead of the default "master".

Citation to solution:
https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files

** Nvidia

My desktop has a Nvidia A4000 in it and when I was fresh installing NixOS on it I kept getting an error saying

#+begin_src
  When NVIDIA PRIME is enabled, the GPU bus IDs must be configured.
#+end_src

This was weird as I hadn't configured any dual GPU options which, as I read the [[https://nixos.wiki/wiki/Nvidia][wiki]], shouldn't occur. I smashed my head against the wall until I commented out nixos-hardware.nixosModules.common-gpu-nvidia, then it installed fine. My guess is that a config was being set even though I don't have any other GPUs except the A4000. So it didn't matter what was in my config, it would flag and fail.

So now my Nvidia config is only declared in the hardware.nix for the desktop. If I, one day, move to a system that has dual graphics I may switch it back.

* Inspirations

[[https://github.com/wimpysworld/nix-config/tree/main][Wimpy's nix-config]] for the basis of all of this

[[https://github.com/Misterio77/nix-starter-configs/tree/main][nix-starter-configs]] for an awesome flake templates

[[https://github.com/mcdonc/p51-thinkpad-nixos/tree/main][mcdonc P51 config]] and [[https://www.youtube.com/playlist?list=PLa01scHy0YEmg8trm421aYq4OtPD8u1SN][YouTube series]] and install script

[[https://www.youtube.com/playlist?list=PLa01scHy0YEmg8trm421aYq4OtPD8u1SN][Disko]] for bringing disk setup

[[https://kressle.in/articles/][Ricky Kresslein]] for a bunch of docker setups
