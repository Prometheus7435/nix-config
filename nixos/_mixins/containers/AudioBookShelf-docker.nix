# Auto-generated using compose2nix v0.1.7.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."audiobookshelf-audiobookshelf" = {
    image = "ghcr.io/advplyr/audiobookshelf:latest";
    volumes = [
      "/home/shyfox/code/Audiobooks:/audiobooks:rw"
      "/home/shyfox/code/Podcasts:/podcasts:rw"
      "/home/shyfox/code/config:/config:rw"
      "/home/shyfox/code/metadata>:/metadata:rw"
    ];
    dependsOn = [
      "audiobookshelf-tailscale"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:audiobookshelf-tailscale"
    ];
  };
  systemd.services."podman-audiobookshelf-audiobookshelf" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    partOf = [
      "podman-compose-audiobookshelf-root.target"
    ];
    unitConfig.UpheldBy = [
      "podman-audiobookshelf-tailscale.service"
    ];
    wantedBy = [
      "podman-compose-audiobookshelf-root.target"
    ];
  };
  virtualisation.oci-containers.containers."audiobookshelf-tailscale" = {
    image = "tailscale/tailscale";
    volumes = [
      "/dev/net/tun:/dev/net/tun:rw"
      "/home/shyfox/code/tailscale:/var/lib/tailscale:rw"
    ];
    cmd = [ "tailscaled" ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=net_admin"
      "--cap-add=sys_module"
      "--hostname=books"
      "--network-alias=tailscale"
      "--network=audiobookshelf-default"
    ];
  };
  systemd.services."podman-audiobookshelf-tailscale" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "podman-network-audiobookshelf-default.service"
    ];
    requires = [
      "podman-network-audiobookshelf-default.service"
    ];
    partOf = [
      "podman-compose-audiobookshelf-root.target"
    ];
    wantedBy = [
      "podman-compose-audiobookshelf-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-audiobookshelf-default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.podman}/bin/podman network rm -f audiobookshelf-default";
    };
    script = ''
      podman network inspect audiobookshelf-default || podman network create audiobookshelf-default --opt isolate=true
    '';
    partOf = [ "podman-compose-audiobookshelf-root.target" ];
    wantedBy = [ "podman-compose-audiobookshelf-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-audiobookshelf-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
