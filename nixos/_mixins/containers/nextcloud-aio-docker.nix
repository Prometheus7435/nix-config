# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, username, ... }:

{
  # Runtime
  virtualisation.docker.rootless = {
    enable = true;
    setSocketVariable = true;
    # autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  users.users.${username}.extraGroups = [ "docker" ];

  # Containers
  virtualisation.oci-containers.containers."nextcloud-aio-mastercontainer" = {
    image = "nextcloud/all-in-one:latest";
    environment = {
      "AIO_DISABLE_BACKUP_SECTION" = "false";
      "COLLABORA_SECCOMP_DISABLED" = "false";
      "NEXTCLOUD_MAX_TIME" = "3600";
      "NEXTCLOUD_STARTUP_APPS" = "deck twofactor_totp tasks calendar contacts notes cookbook mind_map";
      "NEXTCLOUD_UPLOAD_LIMIT" = "10G";
    };
    volumes = [
      "nextcloud_aio_mastercontainer:/mnt/docker-aio-config:rw"
    ];
    dependsOn = [
      "nextcloud-aio-tailscale"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:nextcloud-aio-tailscale"
    ];
  };

  systemd.services."docker-nextcloud-aio-mastercontainer" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-volume-nextcloud_aio_mastercontainer.service"
    ];
    requires = [
      "docker-volume-nextcloud_aio_mastercontainer.service"
    ];
    partOf = [
      "docker-compose-nextcloud-aio-root.target"
    ];
    wantedBy = [
      "docker-compose-nextcloud-aio-root.target"
    ];
  };

  virtualisation.oci-containers.containers."nextcloud-aio-tailscale" = {
    image = "tailscale/tailscale:latest";
    environment = {
      "TS_EXTRA_ARGS" = "--advertise-tags=tag:container";
      "TS_HOSTNAME" = "nextcloud-aio";
      "TS_STATE_DIR" = "nextcloud_aio_mastercontainer/tailscale";
      "TS_USERSPACE" = "false";
      "TS_AUTHKEY" = "tskey-auth-kC1nYghVCr11CNTRL-C8w4VWorLo2HD3rhNocFq2GtdfM6teJ53";
    };
    volumes = [
      "nextcloud_aio_mastercontainer/tailscale:/var/lib/tailscale:rw"
      "nextcloud_aio_mastercontainer/tls:/mnt/tls:rw"
    ];
    ports = [
      "80:80/tcp"
      "8080:8080/tcp"
      "8443:8443/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=net_admin"
      "--cap-add=sys_module"
      "--health-cmd=exit 0"
      "--network-alias=tailscale"
      "--network=nextcloud-aio_default"
    ];
  };

  systemd.services."docker-nextcloud-aio-tailscale" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-nextcloud-aio_default.service"
    ];
    requires = [
      "docker-network-nextcloud-aio_default.service"
    ];
    partOf = [
      "docker-compose-nextcloud-aio-root.target"
    ];
    wantedBy = [
      "docker-compose-nextcloud-aio-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-nextcloud-aio_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f nextcloud-aio_default";
    };
    script = ''
      docker network inspect nextcloud-aio_default || docker network create nextcloud-aio_default
    '';
    partOf = [ "docker-compose-nextcloud-aio-root.target" ];
    wantedBy = [ "docker-compose-nextcloud-aio-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-nextcloud_aio_mastercontainer" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect nextcloud_aio_mastercontainer || docker volume create nextcloud_aio_mastercontainer
    '';
    partOf = [ "docker-compose-nextcloud-aio-root.target" ];
    wantedBy = [ "docker-compose-nextcloud-aio-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-nextcloud-aio-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
